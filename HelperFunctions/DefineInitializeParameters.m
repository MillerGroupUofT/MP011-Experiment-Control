
% Define and initialize all GUI parameters
function DefineInitializeParameters()

    handles = [];
    global whostopped
    whostopped = '';

    % GUI Settings
    handles.gui_panelBackgroundColor = 'white';
    handles.gui_textFontName = 'segoe ui';
    handles.gui_textFontColor = 'black';
    handles.gui_editFontName = 'consolas';
    handles.gui_editFontColor = 'black';
    handles.gui_editBackgroundColor = 'white';
    handles.gui_tableBackgroundColor = [1,1,1; 0.6,0.6,0.6];    % Background colors for row-stripped uitable
    
    % Timer settings
    handles.timer_timeNow = now;                    % current time (number of days since Jan 1, 0000)      
    handles.timer_busyMode = 'drop';                % timer busy mode
    handles.timer_execMode = 'fixedSpacing';        % timer execution mode
    handles.timer_period = 2.0;                     % timer period for callback
    handles.timer_startDelay = 0.0;                 % timer start delay of callback
    handles.timer_status = 'off';

    handles.timer_obj = timer(...                   % timer object
        'BusyMode', handles.timer_busyMode, ...
        'ExecutionMode', handles.timer_execMode, ...
        'Period', handles.timer_period, ...
        'StartDelay', handles.timer_startDelay, ...
        'StopFcn', {@CallbackFunc_Timer_Stop}, ...
        'StartFcn', {@CallbackFunc_Timer_Start}, ...
        'TimerFcn', {@CallbackFunc_Timer}...
        );

    
    % Communication (COM) variables
    handles.com_numTry = 10;                        % Number of times to try to get answer from server
    handles.com_waitTime.server_device = 0.5;       % COM time between server and device (s)
    handles.com_waitTime.client_server = 0.8;       % COM time between client and server (s)
    handles.com_timeOut = 30;                       % COM server timeout value (s)
    %handles.com_timeOut = 0.90*1800000;

    % COM objects
    handles.HV_serverObj = [];
    handles.micra_serverObj = [];
    handles.oscilloscope_serverObj = [];
    handles.chiller_serverObj = [];
    handles.shutters_serverObj = {[], [], []};      
    handles.camera_serverObj = [];
    handles.stages_serverObj = {[], [], [], [], []};

    % List of connected devices (for CLI)
    % Device COM states (2 = busy, 1 = connected, 0 = disconnected, -1 = error)
    handles.com_devStateList = {''};                      
    handles.com_devState_HV = 0;                            
    handles.com_devState_chiller = 0;
    handles.com_devState_micra = 0;
    handles.com_devState_oscilloscope = 0;
    handles.com_devState_shutters = {0, 0, 0};            
    handles.com_devState_camera = 0;
    handles.com_devState_stages = {0, 0, 0, 0, 0};
    
    % Last time when device communication was active
    handles.com_timeLastCOM.micra = 0;
    handles.com_timeLastCOM.HV = 0;
    handles.com_timeLastCOM.chiller = 0;
    handles.com_timeLastCOM.shutters = {0, 0, 0};         
    handles.com_timeLastCOM.camera = 0;
    handles.com_timeLastCOM.stages = {0, 0, 0, 0, 0};

    % Variables for server COM command line interface
    handles.cli_devName = '';
    handles.cli_serverObj = [];
    handles.cli_cmd = '';
    handles.cli_reply = '';

    % Device statuses
    handles.chiller_comStatus = 'Not connected to server yet...';
    handles.HV_comStatus = 'Not connected to server yet...';
    handles.micra_comStatus = 'Not connected to server yet...';
    handles.shutters_comStatus = 'Not connected to server yet...';
%     handles.stages_comStatus = 'Not connected to server yet...';

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % HIGH VOLTAGE POWER SUPPLY
    handles.HV_serverIP = '192.168.0.201';
    handles.HV_serverPort = '30401';
    handles.HV_comPort = '5';
    handles.HV_comBaudRate = '19200';
    handles.HV_comFlowControl = 'none';
    handles.HV_comTermChar = 'CR';
    
    
    % HV parameters for plot
    handles.minCurrentDivision = 1;
    handles.minVoltageDivision = 10;
    handles.numTimePointsPlot = 300;
    handles.Current = zeros(handles.numTimePointsPlot,3);
    handles.Voltage = zeros(handles.numTimePointsPlot,3);
    handles.CurrTimePoint = 2;
    handles.nominalCurrent = 0.00;      % uA
    handles.nominalVoltage = 0;         % kV
    handles.QueryPeriod = 0.5;  % seconds


    % HV data
    handles.HV.data = [];
    handles.nominalVoltage = 0.0;
    handles.com_devState_HV_start = 0;
    handles.StatusAutoCondition = 0;
    
    handles.HV.cmdList = {...
        'Desired Voltage', '10.00', 'kV'; ...
        'Desired Voltage Acc', '0.1', 'kV'; ...
        'Voltage Increment', '0.01', 'kV'; ...
        'Slowdown Point', '80', '%'; ...
        'Conditioning Slope 1', '10.0', 'kV/min'; ...
        'Conditioning Slope 2', '5.0', 'kV/min'; ...
        'Current Arc', '2.000', sprintf('%sA',char(181)); ... % handles.arcThreshCurrent
        'Voltage Arc', '5.000', 'kV' ... % handles.arcThreshVoltage
        };
        

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Micra
    handles.micra_serverIP = '192.168.0.201';
    handles.micra_serverPort = '30402';
    handles.micra_comPort = '12';
    handles.micra_comBaudRate = '38400';
    handles.micra_comFlowControl = 'none';
    handles.micra_comTermChar = 'CRLF';

    % Micra data
    handles.micra.data = [];
    
    handles.micra.cmdList = {...
        'Software Version', '?SV'; ...
        'Laser Status', '?L'; ...
        'KeySwitch State', '?K'; ...
        'Shutter State', '?S'; ...
        'Micra Power', '?UF'; ...
        'Verdi Power', '?P'; ...
        'Micra Light Loop', '?VLL'; ...
        'Head Operating hours', '?HH'; ...
        'Mode Lock', '?MDLK'; ...
        'Baseplate Temp', '?BT'; ...
        'Current', '?C'; ...
        'Current Delta', '?CD'; ...
        'Power track', '?PTRK'; ...
        'Fault History', '?FH'; ...
        'Light Loop Servo Status', '?LRS'; ...
        'Light Regulation Set Power', '?SP'; ...
        'Regulation Mode', '?M'; ...
        'LBO Temp Servo Drive', '?LBOD'; ...
        'LBO Temp Servo Status', '?LBOSS'; ...
        'LBO Temp Set', '?LBOST'; ...
        'LBO Temp', '?LBOT'; ...
        'LBO Heater State', '?LBOH'; ...
        'Vanadate Temp Servo Drive', '?VD'; ...
        'Vanadate Temp Servo Status', '?VSS'; ...
        'Vanadate Temp Set', '?VST'; ...
        'Vanadate Temp', '?VT'; ...
        'Diode1 Temp Servo Drive', '?D1TD'; ...
        'Diode1 Temp Servo Status', '?D1SS'; ...
        'Diode1 Temp Set', '?D1ST'; ...
        'Diode1 Temp', '?D1T'; ...
        'Diode1 Current', '?D1C'; ...
        'Diode1 Heatsink Temp', '?D1HST'; ...
        'Diode1 Hours', '?D1H'; ...
        'Etalon Temp Servo Drive', '?ED'; ...
        'Etalon Temp Servo Status', '?ESS'; ...
        'Etalon Temp Set', '?EST'; ...
        'Etalon Temp' '?ET'; ...
        };
    
        handles.micra.editable_cmdList = {...
        'Laser Status', 'L'; ...
        'Shutter State', 'S'; ...
        'Micra Power', 'UF'; ...
        'Verdi Power', 'P'; ...
        'Micra Light Loop', 'VLL'; ...
        'Mode Lock', 'AMDLK'; ...
        'Power track', 'PTRK'; ...
        'LBO Heater', 'LBOH'; ...
        };

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Tektronix DPO2024 (Oscilloscope)

    % Clean up any leftover interface/device objects
    hInt = instrfindall('Type', 'visa-tcpip');
    if(~isempty(hInt))
        fclose(hInt);
    end
    hDev = instrfindall('Type', 'scope');
    delete(hDev);
    delete(hInt);
    clear hDev hInt;

    % Default IP address
    handles.OscilloscopeIP = '192.168.0.204';
    handles.Oscilloscope_Visa = sprintf('TCPIP0::%s::inst0::INSTR', handles.OscilloscopeIP);
    handles.interfaceOscilloscope = [];
    handles.deviceOscilloscope = [];

    handles.oscilloscope.active_measurement = [];
    handles.oscilloscope.lastselected_measurement = [];
    handles.oscilloscope.active_source = [];
    handles.oscilloscope.lastselected_source = [];

    handles.oscilloscope.cmdList = {...
        '', ...
        'frequency', ...
        'mean', ...
        'period', ...
        'peak2peak', ...
        'crms', ...
        'minimum', ...
        'maximum', ...
        'positivewidth', ...
        'negativewidth', ...
        'amplitude', ...
        'rise', ...
        'fall', ...
        'delay', ...
        'phase', ...
        'pduty', ...
        'nduty', ...
        'burstw', ...
        'high', ...
        'low', ...
        'povershoot', ...
        'novershoot', ...
        'cyclemean', ...
        'rms', ...
        'ppulsecount', ...
        'npulsecount', ...
        'area', ...
        'cyclearea' ...
        };

    handles.oscilloscope.channelList = {...
        '', ...
        'channel1', ...
        'channel2', ...
        'channel3', ...
        'channel4' ...
        };
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % RF Cavity chiller

    % Chiller COM settings
    handles.chiller_serverIP = '192.168.0.201';
    handles.chiller_serverPort = '30403';
    handles.chiller_comPort = '3';
    handles.chiller_comBaudRate = '19200';
    handles.chiller_comFlowControl = 'none';
    handles.chiller_comTermChar = 'none';

    % Chiller data
    handles.chiller.data = [];

    % Chiller commands
    handles.chiller.cmdList = {...
        'Read Acknowledge', '00'; ...
        'Read Status', '09'; ...
        'Read Internal Temperature', '20'; ...
        'Read External Sensor', '21'; ...
        'Read Setpoint', '70'; ...
        'Read Low Temperature Limit', '40'; ...
        'Read High Temperature Limit', '60'; ...
        'Read Heat Proportional Band', '71'; ...
        'Read Heat Integral', '72'; ...
        'Read Heat Derivative', '73'; ...
        'Read Cool Proportional Band', '74'; ...
        'Read Cool Integral', '75'; ...
        'Read Cool Derivative', '76'; ...
        'Set Setpoint', 'F0'; ...
        'Set Low Temperature Limit', 'C0'; ...
        'Set High Temperature Limit', 'E0'; ...
        'Set Heat Proportional Band', 'F1'; ...
        'Set Heat Integral', 'F2'; ...
        'Set Heat Derivative', 'F3'; ...
        'Set Cool Proportional Band', 'F4'; ...
        'Set Cool Integral', 'F5'; ...
        'Set Cool Derivative', 'F6'; ...
        'Set On/Off Array', '81'; ...
        'Bath Error', '0F'; ...
        };

    % Chiller status parameters
    handles.chiller.statusList = {...
        'RTD1 Open Fault', ''; ...
        'RTD1 Shorted Fault', ''; ...
        'RTD1 Open', ''; ...
        'RTD1 Shorted', ''; ...
        'RTD3 Open Fault', ''; ...
        'RTD3 Shorted Fault', ''; ...
        'RTD3 Open', ''; ...
        'RTD3 Shorted', ''; ...
        'RTD2 Open Fault', ''; ...
        'RTD2 Shorted Fault', ''; ...
        'RTD2 Open Warn', ''; ...
        'RTD2 Shorted Warn', ''; ...
        'RTD2 Open', ''; ...
        'RTD2 Shorted', ''; ...
        'Refrig High Temp', ''; ...
        'HTC Fault', ''; ...
        'High Fixed Temp Fault', ''; ...
        'Low Fixed Temp Fault', ''; ...
        'High Temp Fault', ''; ...
        'Low Temp Fault', ''; ...
        'Low Level Fault', ''; ...
        'High Temp Warn', ''; ...
        'Low Temp Warn', ''; ...
        'Low Level Warn', ''; ...
        'Buzzer On', ''; ...
        'Alarm Muted', ''; ...
        'Unit Faulted', ''; ...
        'Unit Stopping', ''; ...
        'Unit On', ''; ...
        'Pump On', ''; ...
        'Compressor On', ''; ...
        'Heater On', ''; ...
        'RTD2 Controlling', ''; ...
        'Heat LED Flashing', ''; ...
        'Heat LED On', ''; ...
        'Cool LED Flashing', ''; ...
        'Cool LED On', ''; ...
        };

    % Chiller configuration parameters
    handles.chiller.configList = {...
        'Setpoint (C)', '', ''; ...
        'Low Temperature Limit (C)', '', ''; ...
        'High Temperature Limit (C)', '', ''; ...
        'Heat Proportional Band', '', ''; ...
        'Heat Integral', '', ''; ...
        'Heat Derivative', '', ''; ...
        'Cool Proportional Band', '', ''; ...
        'Cool Integral', '', ''; ...
        'Cool Derivative', '', ''; ...
        };

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % SHUTTERS

    % Shutters COM settings
    for(i = 1:3)
       handles.shutters_serverIP{i} = '192.168.0.201';
       handles.shutters_serverPort{i} = sprintf('3050%d', i);
       handles.shutters_comBaudRate{i} = '9600';
       handles.shutters_comFlowControl{i} = 'none';
       handles.shutters_comTermChar{i} = 'CRLF';
    end
    handles.shutters_comPort{1} = '6';
    handles.shutters_comPort{2} = '7';
    handles.shutters_comPort{3} = '8';

    % Shutter commands
    handles.shutters_cmd.Open = char(64);           % Open shutter
    handles.shutters_cmd.Close = char(65);          % Close shutter
    handles.shutters_cmd.Trigger = char(66);        % Trigger control
    handles.shutters_cmd.Reset = char(67);          % Reset control
    handles.shutters_cmd.OpenAuxOut = char(68);     % Open aux-out
    handles.shutters_cmd.CloseAuxOut = char(69);    % Close aux-out

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % STAGES

    % Name of stages
    handles.stages_name = {'Horizontal', 'Vertical', 'Z-Axis', 'Time Delay', 'Rotation'};

    for(i = 1:5)

        % Control settings
        handles.stages_opMode{i} = 'Destination';
        handles.stages_dir{i} = 'Forward';
        handles.stages_value{i} = '0';
        handles.stages_targetPos{i} = '0';
        handles.stages_currentPos{i} = '0';
        handles.stages_comStatus{i} = 'Not connected yet...';
        handles.stages_statusPeriod{i} = 2.0;                   % Time between status updates  
    end
    handles.stages_comStatus{4} = 'Not connected to server yet...';

    for(i = 1:3)
    
    % Horizontal, Vertical and Z-axis stage COM settings
        handles.stages_serverIP{i} = '192.168.0.201';
        handles.stages_serverPort{i} = sprintf('3060%s',num2str(i));
        handles.stages_comBaudRate{i} = '9600';
        handles.stages_comFlowControl{i} = 'none';
        handles.stages_comTermChar{i} = 'CR';

        switch i
            case 1
                handles.stages_comPort{i} = '9';

            case 2
                handles.stages_comPort{i} = '10';

            case 3
                handles.stages_comPort{i} = '11';
        end
    
    end
    
    handles.stages_scalefactor{1} = 0.08; % To be changed
    handles.stages_scalefactor{2} = 0.08; % To be changed
    handles.stages_scalefactor{3} = 0.05; % To be changed

    % Time stage COM settings
    i = 4;
    handles.stages_serverIP{i} = '192.168.0.201';
    handles.stages_serverPort{i} = '30604';
    handles.stages_comPort{i} = '13';
    handles.stages_comBaudRate{i} = '57600';
    handles.stages_comFlowControl{i} = 'Xon/Xoff';
    handles.stages_comTermChar{i} = 'CRLF';

    % Rotation stage COM settings
    i = 5;
    handles.stages_serverIP{i} = '192.168.0.201';
    handles.stages_serverPort{i} = '30605';
    handles.stages_comPort{i} = '4';
    handles.stages_comBaudRate{i} = '19200';
    handles.stages_comFlowControl{i} = 'NONE';
    handles.stages_comTermChar{i} = 'CR';

    for(i = 1:3)
    
        % Horizontal, Vertical and Z-axis stage commands
        handles.stages_cmd{i}.StageID = '';             % Set/Get stage identifier
        handles.stages_cmd{i}.RevInfo = 'TREV';         % Get controller revision information
        handles.stages_cmd{i}.Reset = 'RESET';          % Reset controller
        handles.stages_cmd{i}.Home = 'HOM1';            % Execute home search 
        handles.stages_cmd{i}.Operation = 'MA';         % Set to move absolute (MA1) or relative (MA0)
        handles.stages_cmd{i}.Go = '!GO';               % Start move
        handles.stages_cmd{i}.Stop = '!S';              % Stop
        handles.stages_cmd{i}.Kill = '!K';              % Kill
        handles.stages_cmd{i}.GetCurrPos = '!TPM';      % Get current position 
        handles.stages_cmd{i}.GetState = '!TPER:!TAS';  % Get positioner error and controller state
        handles.stages_cmd{i}.GetVel = 'V';             % Set/Get velocity
        handles.stages_cmd{i}.GetAcc = 'A';             % Set/Get acceleration
        handles.stages_cmd{i}.GetDistance = '!D';       % Set/Get distance
        handles.stages_cmd{i}.GetErr = 'TCMDER';        % Get last command error
        handles.stages_cmd{i}.GetConfig = 'TPM:A:V:D:HOMV:LSNEG:LSPOS';    % Get all configuration parameters
        handles.stages_cmd{i}.Encoder = 'ENC';          % Set/Get encoder status
        handles.stages_cmd{i}.ResetEncoder = 'PSET0';   % Reset encoder
        handles.stages_cmd{i}.Scale = 'SCALE';          % Set/Get scale status

        % Horizontal, Vertical and Z-axis stage configuration parameter names
        handles.stages_configName{i} = {...
            'Position', ...
            'Acceleration', ...
            'Velocity', ...
            'Distance', ...  
            'Home search velocity', ... 
            'Negative software limit', ...   
            'Positive software limit', ...
            };

        % Horizontal, Vertical and Z-axis stage configuration parameter commands
            handles.stages_configcommand{i} = {...
            handles.stages_cmd{i}.GetAcc, ...
            handles.stages_cmd{i}.GetVel, ...
            handles.stages_cmd{i}.GetDistance, ...  
            'HOMV', ... 
            'LSNEG', ...   
            'LSPOS', ...
            };
    end
    
    % Time stage commands
    handles.stages_cmd{4}.StageID = '1ID';      % Set/Get stage identifier
    handles.stages_cmd{4}.RevInfo = '1VE';      % Get controller revision information
    handles.stages_cmd{4}.Reset = '1RS';        % Reset controller
    handles.stages_cmd{4}.Home = '1OR';         % Execute home search 
    handles.stages_cmd{4}.MoveAbs = '1PA';      % Move (absolute)
    handles.stages_cmd{4}.MoveRel = '1PR';      % Move (relative)
    handles.stages_cmd{4}.Stop = '1ST';         % Stop
    handles.stages_cmd{4}.GetCurrPos = '1TP';   % Get current position 
    handles.stages_cmd{4}.GetState = '1TS';     % Get positioner error and controller state
    handles.stages_cmd{4}.GetVel = '1VA';       % Set/Get velocity
    handles.stages_cmd{4}.GetAcc = '1AC';       % Set/Get acceleration
    handles.stages_cmd{4}.GetErr = '1TE';       % Get last command error
    handles.stages_cmd{4}.GetConfig = '1ZT';    % Get all configuration parameters

    % Time stage configuration parameter names
    handles.stages_configName{4} = {...
        'Stage identifier', ...
        'Acceleration', ...
        'Backlash compensation', ...
        'Hysteresis compensation', ...
        'Home search type', ...  
        'Jerk time', ...
        'Home search velocity', ...   
        'Home search time-out', ...
        'Controller''s RS-485 address', ...
        'Negative software limit', ...   
        'Positive software limit', ...
        'Velocity', ...  
        'Base velocity', ...
        'SmartStage configuration', ...   
        };

    % Time stage controller states
    handles.stages_stateCode{4} = {...
        '0A', ...                               
        '0B', ...                               
        '0C', ...                               
        '0D', ...                               
        '0E', ...                               
        '0F', ...                              
        '10', ...                               
        '11', ...                               
        '14', ...                               
        '1E', ...                              
        '1F', ...                               
        '28', ...                               
        '32', ...                               
        '33', ...                               
        '34', ...                              
        '35', ...                               
        '3C', ...                               
        '3D', ...                               
        '3E', ...                               
        '46', ...                               
        '47' ...                               
        };
    
    handles.stages_stateString{4} = {...
        'NOT REFERENCED from rest', ...
        'NOT REFERENCED from HOMING', ...
        'NOT REFERENCED from CONFIGURATION', ...
        'NOT REFERENCED from DISABLE', ...
        'NOT REFERENCED from READY', ...
        'NOT REFERENCED from MOVING', ...
        'NOT REFERENCED from ESP stage error', ...
        'NOT REFERENCED from JOGGING', ...
        'CONFIGURATION', ...
        'HOMING commanded from RS-232-C', ...
        'HOMING commanded by SMC-RC', ...
        'MOVING', ...                               
        'READY from HOMING', ...                     
        'READY from MOVING', ...                          
        'READY from DISABLE', ...                          
        'READY from JOGGING', ...                          
        'DISABLE from READY', ...                          
        'DISABLE from MOVING', ...                          
        'DISABLE from JOGGING', ...                             
        'JOGGING from READY', ...                               
        'JOGGING from DISABLE'...                              
        };
    
        % Rotation stage commands
        handles.stages_cmd{5}.StageID = '1 NIDENTIFY';    % Set/Get stage identifier
        handles.stages_cmd{5}.RevInfo = '1 NVERSION';     % Get controller revision information
        handles.stages_cmd{5}.Reset = '1 NRESET';         % Reset controller
        handles.stages_cmd{5}.MoveAbs = '1 NMOVE';        % Move (absolute)
        handles.stages_cmd{5}.MoveRel = '1 NRMOVE';       % Move (relative)
        handles.stages_cmd{5}.Home = '0.0 1 NMOVE';       % Move to home
        handles.stages_cmd{5}.Stop = '1 NABORT';          % Stop
        handles.stages_cmd{5}.GetCurrPos = '1 NPOS';      % Get current position 
        handles.stages_cmd{5}.GetState = '1 NSTATUS';     % Get stage status
        handles.stages_cmd{5}.SetVel = '1 SETNVEL';       % Set velocity
        handles.stages_cmd{5}.GetVel = '1 GETNVEL';       % Get velocity
        handles.stages_cmd{5}.SetAcc = '1 SETNACCEL';     % Set acceleration
        handles.stages_cmd{5}.GetAcc = '1 GETNACCEL';     % Get acceleration
        handles.stages_cmd{5}.GetErr = '1 GETNERROR';     % Get last command error

        % Rotation stage configuration parameter names
        handles.stages_configName{5} = {...
            'Identification', ...
            'Acceleration', ...
            'Velocity' ...
            };

    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % CAMERA

    % COM settings
    handles.camera_serverIP = '192.168.0.200';  % IP address of Lagavulin
    handles.camera_serverPort = '2055';

    % Status
    handles.camera_comStatus = 'Not connected to server yet...';
    handles.camera_acqStatus = 'Camera not initialized yet...';

    % Camera settings
    handles.cameraAcqMode = 'Single Image';             % Single Image, Average, Multiple Images, Continuous
    handles.cameraAcqMode_Avg.numImgPerAvg = '5';       % Setting for 'Average' Mode
    handles.cameraAcqMode_Mult.timeInterval = '60';     % Time interval for acquisition format: hh:mm:ss
    handles.cameraAcqMode_Mult.numAcq = '10';           % Number of acquisitions
    handles.cameraAcqType = 'Light Exposure';           % Light, Dark, Test, Triggered, TDI Internal, TDI External
    handles.cameraExposureTime = '10';                  % exposure time, in miliseconds
    handles.cameraROI = 'Full';                         % Small, Medium, Large, Full, Custom
    handles.cameraROI_customSerialOri = '50';
    handles.cameraROI_customSerialLen = '1024';
    handles.cameraROI_customSerialBin = '1';
    handles.cameraROI_customParaOri = '0';
    handles.cameraROI_customParaLen = '2048';
    handles.cameraROI_customParaBin = '1';
    handles.scanNum = '0';
    handles.cameraAutoSave_path = ['E:\Exp\', datestr(now, 'yyyy-mm-dd'), '\scans\scan', handles.scanNum];
    handles.cameraAutoSave_filename = ['scan' handles.scanNum '_000001'];
    handles.cameraAutoSave_format = 'tiff (uint16)';

    % Camera settings options
    handles.camera_ROIList = {'Full', 'Large', 'Medium', 'Small', 'Custom'};
    handles.camera_acqTypeList = {'Single Image', 'Average', 'Multiple Images', 'Continuous'};
    handles.camera_acqModeList = {'Light Exposure', 'Dark Exposure', 'Test Exposure', 'Triggered Exposure'};
    handles.camera_formatList = {'tiff (uint16)', 'tiff (int16)', 'tiff (int32)', 'tiff (float)', 'fits (uint16)', 'fits (int16)', 'fits (int32)', 'fits (float)'};
    handles.camera_readoutModeList = {'800 kHz', '400 kHz', '200 kHz', '100 kHz'};  
    
    % Camera readout & format, configuration parameters
    handles.camera_configName = {...
        'CCD format serial origin', 'CCD format serial length', 'CCD format serial binning', 'CCD format serial post scan', ...
        'CCD format parallel origin', 'CCD format parallel length', 'CCD format parallel binning', 'CCD format parallel post scan', ...
        'Exposure time (ms)', ...
        'Continuous Clear', ...
        'DSI sample time', ...
        'Analogue attenuation', ...
        'Port 1 offset', ...
        'Port 2 offset', ...
        sprintf('TDI delay (%ss)', char(181)), ...
        'Number of samples per pixel', ...
        'Command on trigger'...
        'Instrument model number', ...
        'Instrument serial number', ...
        'Hardware revision', ...
        'Serial phasing', ...
        'Serial split', ...
        'Serial size (px)', ...
        'Parallel phasing', ...
        'Parallel split', ...
        'Parallel size (px)', ...
        'Parallel shift delay (100 ns)', ...
        'Number of ports', ...
        'Shutter close delay (ms)', ...
        'CCD temperature setpoint offset (0.1 C)', ...
        'Low temperature limit', ...
        'CCD temperature setpoint (C)', ...
        'Operational temperature (C)', ...
        'Port select', ...
        'Operational pressure (torr)', ...
        'High pressure limit (torr)', ...
        'Pixel clearing time (ns)'...
        };

    % Camera status parameters
    handles.camera_statusName = {...
        'CCD temperature (C)', ...
        'Backplate temperature (C)', ...
        'CCD chamber pressure (torr)', ...
        'Shutter status', ...
        'XIRQA status', ...
        'Cooler status'...
        };

    % Camera image settings names
    handles.camera_imgSettingsName = {...
        'Exposure time (ms)', ...
        'Number of readout modes', ...
        'Readout Mode', ...
        'Average-image number', ...
        'Number of frames to acquire', ...
        'Camera acquisition mode', ...
        'Camera acquisition type', ...
        'CCD format serial origin', ...
        'CCD format serial length', ...
        'CCD format serial binning', ...
        'CCD format parallel origin', ...
        'CCD format parallel length', ...
        'CCD format parallel binning'...
        };

    % Camera function identifiers
    handles.camera.camWaitTimeInc = 0.05;       % seconds
    handles.camera.camWaitTimeOut = 1.00;       % seconds
    handles.camera.packLenAck = 8;              % Number of bytes in acknowledge packet
    handles.camera.funcID.GetCamStatus = 1011;
    handles.camera.funcID.InquireAcqStatus = 1017;
    handles.camera.funcID.TerminateAcq = 1018;
    handles.camera.funcID.RetrieveImg = 1019;
    handles.camera.funcID.GetImgHeader = 1024;
    handles.camera.funcID.SaveImgOnServer = 1031;
    handles.camera.funcID.SetAcqMode = 1034;
    handles.camera.funcID.SetExposureTime = 1035;
    handles.camera.funcID.SetAcqType = 1036;
    handles.camera.funcID.AcquireImg = 1037;
    handles.camera.funcID.SetImgAvgNum = 1038;
    handles.camera.funcID.GetImgSettings = 1041;
    handles.camera.funcID.SetCamROI = 1043;
    handles.camera.funcID.SetCoolerState = 1046;
    handles.camera.funcID.SetImgSavePath = 1047;
    handles.camera.funcID.GetCamParam = 1048;

    % Camera data types
    handles.camera.dataType.Status = 2002;
    handles.camera.dataType.Arbitrary = 2003;
    handles.camera.dataType.AcqStatus = 2004;
    handles.camera.dataType.ImgHeader = 2006;
    handles.camera.dataType.CommandDone = 2007;
    handles.camera.dataType.ImgSettings = 2008;
    handles.camera.dataType.CameraParam = 2009;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Open database for scan
    handles.dbidscan = mksqlite(0, 'open', 'MP011scanlog.sqlite');

    handles.logscan_columnnames = {...
            'Filename', 'STRING'; ...
            'Date', 'STRING'; ...
            'Time', 'STRING'; ...
            'Loop', 'STRING'; ...
            'Delay', 'REAL'; ...
            'Horizontal', 'REAL'; ...
            'Vertical', 'REAL'; ...
            'Z', 'REAL'; ...
            'Angle', 'REAL'; ...
            'Exposure_time', 'REAL'; ...
            'Pump_type', 'STRING'; ...
            'Region_of_Interest', 'STRING'; ...
            'Acquisition_mode', 'STRING'; ...
            'Acquisition_type', 'STRING'; ...
            'Shutter_1', 'STRING'; ...
            'Shutter_2', 'STRING'; ...
            'Shutter_3', 'STRING' ...
            };
    
    year = date;
    year = year(end-3:end);

    handles.logscan_tablename = sprintf('Y%sscan', year);
    
    command = '';
    for i = 1:numel(handles.logscan_columnnames)/2
        command = [command char(handles.logscan_columnnames(i,1)) ' ' char(handles.logscan_columnnames(i,2))];
        if i ~= numel(handles.logscan_columnnames)/2
            command = [command ', '];
        end
    end

    tablesscan = mksqlite(handles.dbidscan, 'show tables' );

    if(isempty(tablesscan) == 1 || strcmp(tablesscan.tablename,handles.logscan_tablename) ~= 1)
        mksqlite(handles.dbidscan, ['CREATE TABLE ' handles.logscan_tablename '(' command ')'] );
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    % Open database for timer
    handles.dbidtimer = mksqlite(0, 'open', 'MP011timerlog.sqlite');

    handles.logtimer_columnnames = {...
            'Time', 'INTEGER'; ...
            'TimeStr', 'STRING'; ...
            'RF_Power', 'REAL'; ...
            'Micra_Power', 'REAL'; ...
            'Verdi_Power', 'REAL'; ...
            'Chiller_Temperature_internal', 'REAL'; ...
            'Chiller_Temperature_external', 'REAL'; ...
            'Voltage', 'REAL'; ...
            'Current', 'REAL' ...
            };
    
    year = date;
    year = year(end-3:end);

    handles.logtimer_tablename = sprintf('Y%stimer', year);
    
    command = '';
    for i = 1:numel(handles.logtimer_columnnames)/2
        command = [command char(handles.logtimer_columnnames(i,1)) ' ' char(handles.logtimer_columnnames(i,2))];
        if i ~= numel(handles.logtimer_columnnames)/2
            command = [command ', '];
        end
    end

    tablestimer = mksqlite(handles.dbidtimer, 'show tables' );

    if(isempty(tablestimer) == 1 || strcmp(tablestimer.tablename,handles.logtimer_tablename) ~= 1)
        mksqlite(handles.dbidtimer, ['CREATE TABLE ' handles.logtimer_tablename '(' command ')'] );
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Horizontal stage settings
    handles.HoriStageCOMStatus = 'Not connected yet...';

    % Vertical stage settings
    handles.VertStageCOMStatus = 'Not connected yet...';

    % Z-axis stage settings
    handles.ZAxisStageCOMStatus = 'Not connected yet...';

    % Time stage settings
    handles.TimeStageCOMStatus = 'Not connected yet...';

    % Rotation stage settings
    handles.RotStageCOMStatus = 'Not connected yet...';

    % Scan settings
    % handles.scanNum
    handles.scanComment = '';
    handles.scanNumImgPumpOff = '1';
    handles.scanNumImgPumpOn = '1';
    handles.scanNumImgAfter = '1';

    handles.scanHoriMin = '';
    handles.scanHoriStep = '';
    handles.scanHoriMax = '';
    handles.scanVertMin = '';
    handles.scanVertStep = '';
    handles.scanVertMax = '';
    handles.scanZMin = '';
    handles.scanZStep = '';
    handles.scanZMax = '';
    handles.scanHoriPos = [];
    handles.scanVertPos = [];
    handles.scanZPos = [];

    handles.scanTimeMin = '';
    handles.scanTimeStep = '';
    handles.scanTimeMax = '';
    handles.scanTimePoints_str = '';
    handles.scanTimeZeroPos = '';
    handles.scanTimeStagePos_str = '';

    handles.scanRotMin = '';
    handles.scanRotStep = '';
    handles.scanRotMax = '';
    handles.scanRotPoints_str = '';
    handles.scanRotZeroPos = '';
    handles.scanRotStagePos_str = '';

    % Numbers
    handles.numGrandLoops = '1';
    handles.numSamplePoints = '0';
    handles.numTimePoints = '0';
    handles.numRotPoints = '0';
    handles.numSetPerScan = '1';

    % Current number
    handles.numGrandLoops_curr = '0';
    handles.numSamplePoints_curr = '0';
    handles.numTimePoints_curr = '0';
    handles.numRotPoints_curr = '0';
    handles.numSetPerScan_curr = '0';
    handles.numImgsTotal_curr = '0';


    % Total number of images
    handles.numImgsTotal = '3';

    % Scan status    
    handles.scanStatus = 'Not ready';
    handles.scanrunning = 0;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % Save handles in base workspace
    assignin('base','handles',handles)
end